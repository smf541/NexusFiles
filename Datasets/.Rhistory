abline(v=sum(boy.after.girl), col="red")
prod(1+runif(12,0,0.1))
growth <- replicate (10000, prod(1+runif(12,0,0.1)))
dens(growth, norm.comp = TRUE)
growth <- replicate (10000, prod(1+runif(12,0,0.5)))
dens(growth, norm.comp = TRUE)
growth <- replicate (10000, prod(1+runif(12,0,0.01)))
dens(growth, norm.comp = TRUE)
growth <- replicate (10000, log(prod(1+runif(12,0,0.5))))
dens(growth, norm.comp = TRUE)
data(Howell1)
d <- Howell1
library(rethinking)
data(Howell1)
d <- Howell1
str(d)
#filter out anyone younger than 18
d2 <- d[ d$age >= 18, ]
str(d2)
dens(d2$height)
curve(dnorm(x,178,20), from=100, to=250)
curve(dunif(x, 0, 50), from=-10, to=60)
#sampling the prior of mu and sigma
sample_mu <- rnorm(1e4, 178, 20)
sample_sigma <- runif(1e4, 0, 50)
prior_h <- rnorm(1e4, sample_mu, sample_sigma)
dens(prior_h)
#sampling the prior of mu and sigma
sample_mu <- rnorm(1e4, 178, 40)
sample_sigma <- runif(1e4, 0, 50)
prior_h <- rnorm(1e4, sample_mu, sample_sigma)
dens(prior_h)
#sampling the prior of mu and sigma
sample_mu <- rnorm(1e4, 178, 20)
sample_sigma <- runif(1e4, 0, 50)
prior_h <- rnorm(1e4, sample_mu, sample_sigma)
dens(prior_h)
#sampling the prior of mu and sigma
sample_mu <- rnorm(1e4, 160, 20)
sample_sigma <- runif(1e4, 0, 50)
prior_h <- rnorm(1e4, sample_mu, sample_sigma)
dens(prior_h)
mu.list <- seq(from=140, to=160, length.out=200)
sigma.list <- seq(from=4, to=9, length.out=200)
post <- expand.grid(mu=mu.list, sigma=sigma.list)
post$LL <- sapply(1:nrow(post), function(i) sum(dnorm(d2$height,
mean=post$mu[i],
sd=post$sigma[i],
log=TRUE)))
post$prod <- post$LL + dnorm(post$mu, 178, 20, TRUE) +
dunif(post$sigma, 0, 50, TRUE)
post$prob <- exp(post$prod - max(post$prod))
#plot posterior distribution
contour_xyz(post$mu, post$sigma, post$prob)
image_xyz(post$mu, post$sigma, post$prob)
sample.rows <- sample(1:nrow(post), size=1e4, replace=TRUE, psob=post$prob)
sample.mu <- post$mu[sample.rows]
sample.sigma <- post$sigma[sample.rows]
sample.rows <- sample(1:nrow(post), size=1e4, replace=TRUE, prob=post$prob)
sample.mu <- post$mu[sample.rows]
sample.sigma <- post$sigma[sample.rows]
plot(sample.mu, sample.sigma, cex=0.5, pch=16, col=col.alpha(rangi2,0.1))
plot(sample.mu, sample.sigma, cex=1, pch=16, col=col.alpha(rangi2,0.1))
install.packages("ssh")
require(stringr)
sh_txt <- str_replace(sh_txt, "filename", ss_name)
save.image("C:/Users/dxsb43/GitHub/NexusFiles/MrBayesAutomation_workspace.RData")
require(stringr)
#extract file paths of .nex.ss files
ss_paths <- list.files(pattern=".nex.ss$", recursive=TRUE)
#keep only the file name
ss_base <- basename(ss_paths)
#change extension to .sh
ss_sh <- gsub(".nex.ss", ".sh", ss_base)
#get filename without extension
ss_name <- gsub(".sh", "", ss_sh)
#get folder name from first part of filename
ss_folder <- gsub("_.+_ss$", "", ss_name)
#write text to .sh files:
#text to be modified for each file
sh_txt <- c("#!/bin/csh", "cd dataset", "mb filename.nex")
sh_txt <- str_replace(sh_txt, "filename", ss_name)
sh_txt <- str_replace(rep(sh_txt), "filename", ss_name)
sh_txt
#write text to .sh files:
#text to be modified for each file
sh_txt <- "#!/bin/csh\ncd dataset\nmb filename.nex"
sh_txt <- str_replace(rep(sh_txt), "filename", ss_name)
sh_txt
sh_txt <- str_replace(rep(sh_txt), "dataset", ss_folder)
sh_txt
writeLines(sh_txt, ss_sh)
sh_txt
sh_txt
ss_sh
lapply(seq_len(ss_sh), function(i) {
file.write(file=ss_sh[i], sh_txt[i])
}
)
seq_along(ss_sh)
lapply(seq_along(ss_sh), function(i) {
file.write(file=ss_sh[i], sh_txt[i])
}
)
writeLines(file=ss_sh[i], sh_txt[i])
lapply(seq_along(ss_sh), function(i) {
writeLines(file=ss_sh[i], sh_txt[i])
}
)
lapply(seq_along(ss_sh), function(i) {
writeLines(sh_txt[i], file=ss_sh[i])
}
)
lapply(seq_along(ss_sh), function(i) {
writeLines(sh_txt[i], ss_sh[i])
}
)
invisible()
getwd()
ss_sh
ss_txt
sh_txt
require(stringr)
#extract file paths of .nex files
nex_paths <- list.files(pattern=".nex$", recursive=TRUE)
#keep only the file name
nex_base <- basename(nex_paths)
#change extension to .sh
sh_name <- gsub(".nex", ".sh", nex_base)
#get filename without extension
nex_name <- gsub(".sh", "", sh_name)
#get folder name from first part of filename
nex_folder <- gsub("_.+_ss$", "", nex_name)
nex_folder
#write text to .sh files:
#text to be modified for each file
sh_txt <- "#!/bin/csh \n cd dataset \n mb filename.nex"
#substitute "dataset" and "filename"
sh_txt <- str_replace(rep(sh_txt), "filename", nex_name)
sh_txt <- str_replace(rep(sh_txt), "dataset", nex_folder)
sh_txt
###^filename should be the same as the elements in nex_name
###^dataset should be first part of filename (e.g. for weev_unpart_ss.sh -> weev) -> nex_folder
#write files with sh_txt as content, named nex_sh
lapply(seq_along(nex_sh), function(i) {
writeLines(sh_txt[i], sh_name[i])
}
)
#write files with sh_txt as content, named nex_sh
lapply(seq_along(sh_name), function(i) {
writeLines(sh_txt[i], sh_name[i])
}
)
invisible()
df <- read.table(".//ss_outputs//weev_unpart_ss.nex.ss", header=TRUE, skip=6)
mean.ln.ml(df)
#function for summing run columns
sum.ln.ml <- function(x) {
apply(df[,3:6], 2, sum)
}
#function for finding mean ln marginal likelihood
mean.ln.ml <- function(x) {
mean(sum.ln.ml(x)) #use geometric mean
}
mean.ln.ml(df)
###build data frame from .ss outputs###
partitions <- list.files(pattern="\\.nex\\.ss$")
###build data frame from .ss outputs###
partitions <- list.files(pattern=".nex.ss$")
###build data frame from .ss outputs###
partitions <- list.files(pattern=".nex.ss$", recursive=TRUE)
###build data frame from .ss outputs###
partitions <- basename(list.files(pattern=".nex.ss$", recursive=TRUE))
###build data frame from .ss outputs###
partitions <- gsub("_.nex.ss$", "", basename(list.files(pattern=".nex.ss$", recursive=TRUE)))
###build data frame from .ss outputs###
partitions <- gsub("_ss.nex.ss$", "", basename(list.files(pattern=".nex.ss$", recursive=TRUE)))
###build data frame from .ss outputs###
partitions <- gsub("^.+_", "", gsub("_ss.nex.ss$", "", basename(list.files(pattern=".nex.ss$", recursive=TRUE))))
###build data frame from .ss outputs###
#find unique filenames of .nex.ss files
filenames <- unique(basename(list.files(pattern=".nex.ss$", recursive=TRUE)))
#make vector of folders to iterate over
folders <-
#
partitions <- gsub("^.+_", "", gsub("_ss.nex.ss$", "", filenames))
partitions <- gsub("^.+_", "", gsub("_ss.nex.ss$", "", filenames))
partitions
#make vector of folders to iterate over
folders <- gsub("_.+_ss.nex.ss$", "", filenames)
#make vector of folders to iterate over
folders <- unique(gsub("_.+_ss.nex.ss$", "", filenames))
###build data frame from .ss outputs###
#find unique filenames of .nex.ss files
filenames <- unique(basename(list.files(pattern=".nex.ss$", recursive=TRUE)))
filenames
###build data frame from .ss outputs###
#find unique filenames of .nex.ss files
filenames <- unique(basename(list.files(pattern=".nex.ss$", recursive=TRUE)))
#make vector of folders to iterate over
folders <- unique(gsub("_.+_ss.nex.ss$", "", filenames))
invisible()
setwd("C:/Users/dxsb43/GitHub/NexusFiles/Datasets")
#vector of folder names in folder datasets
folder.name <- basename(list.files())
setwd("C:/Users/dxsb43/GitHub/NexusFiles/Datasets/hyo")
#vector of folder names in folder datasets
folder.name <- basename(list.files())
setwd("C:/Users/dxsb43/GitHub/NexusFiles/Datasets")
#vector of folder names in folder datasets
folder.name <- basename(list.files(".//Datasets"))
#function takes a folder.name vector
process.folder <- function(folder.name) {
vapply(partition,
FUN = function(partition.name) {
mean.ln.ml(list.files(.nex.ss))
paste0(folder.name, '/', partition.name)
return(partition.score)
},
FUN.VALUE = numeric(1)
)
}
process.folder("hyo")
partition <- gsub("^.+_", "", gsub("_ss.nex.ss$", "", filenames))
#function takes a folder.name vector
process.folder <- function(folder.name) {
vapply(partition,
FUN = function(partition.name) {
mean.ln.ml(list.files(.nex.ss))
paste0(folder.name, '/', partition.name)
return(partition.score)
},
FUN.VALUE = numeric(1)
)
}
process.folder("hyo")
#function takes a folder.name vector
process.folder <- function(folder.name) {
vapply(partition,
FUN = function(partition.name) {
partition.score <- mean.ln.ml(list.files(pattern = ".nex.ss$"))
paste0(folder.name, '/', partition.name)
return(partition.score)
},
FUN.VALUE = numeric(1)
)
}
process.folder("hyo")
mean.ln.ml(list.files(pattern = ".nex.ss$"))
list.files(pattern = ".nex.ss$")
list.files(path = paste0(folder.name, "/", partition.name),pattern = ".nex.ss$")
list.files(pattern = ".nex.ss$", recursive=TRUE)
#function takes a folder.name vector
process.folder <- function(folder.name) {
vapply(partition,
FUN = function(partition.name) {
partition.score <- mean.ln.ml(list.files(pattern = ".nex.ss$", recursive=TRUE))
paste0(folder.name, '/', partition.name)
return(partition.score)
},
FUN.VALUE = numeric(1)
)
}
process.folder("hyo")
list.files(pattern = ".nex.ss$", recursive=TRUE, no.. = TRUE)
list.files(pattern = ".nex.ss$", all.files = TRUE)
list.files(pattern = paste0("^", folder.name, "_.+_ss.nex.ss$"), recursive=TRUE)
mean.ln.ml(list.files(pattern = paste0("^", folder.name, "_.+_ss.nex.ss$"), recursive=TRUE)
mean.ln.ml(list.files(pattern = paste0("^", folder.name, "_.+_ss.nex.ss$"), recursive=TRUE))
View(mean.ln.ml)
mean.ln.ml(list.files(pattern = paste0("^", folder.name, "_.+_ss.nex.ss$"), recursive=TRUE))
View(mean.ln.ml)
mean.ln.ml("./hyo/unpart/hyo_unpart_ss.nex.ss")
mean.ln.ml("./hyo/unpart/hyo_part_ss.nex.ss")
mean.ln.ml("./hyo/neotrans/hyo_neotrans_ss.nex.ss")
#function for summing run columns
sum.ln.ml <- function(x) { #x=filename
df <- read.table(x, header=TRUE, skip=6)
apply(df[,3:6], 2, sum)
}
#function for finding mean ln marginal likelihood
mean.ln.ml <- function(x) {
mean(sum.ln.ml(x)) #use geometric mean
}
mean.ln.ml("./hyo/neotrans/hyo_neotrans_ss.nex.ss")
mean.ln.ml("./hyo/unpart/hyo_unpart_ss.nex.ss")
basename(list.files(path=paste0("./", folder.name)))
paste0("./", folder.name)
list.files(path=paste0("./", folder.name))
list.files(path=paste0("./", folder.name, "/"))
list.files(path=paste0("./", folder.name, "/"), recursive=TRUE)
list.files(path=paste0("./", folder.name), recursive=TRUE)
list.files(path=paste0(".//", folder.name), recursive=TRUE)
list.files(path=paste0(".//Datasets//", folder.name))
basename(list.files(path=paste0(".//Datasets//", folder.name)))
#function takes a folder.name vector
process.folder <- function(folder.name) {
partitions <- basename(list.files(path=paste0(".//Datasets//", folder.name))) ##a vector of the folders in each dataset folder
vapply(partitions,
FUN = function(partition.name) {
partition.score <- mean.ln.ml(list.files(path=paste0("./", folder.name, "/", partition.name, pattern = "_ss.nex.ss")))
return(partition.score)
},
FUN.VALUE = numeric(1)
)
}
process.folder("hyo")
process.folder(hyo)
process.folder(folder.name[1])
#function takes a folder.name vector
process.folder <- function(folder.name) {
partitions <- basename(list.files(path=paste0(".//Datasets//", folder.name))) ##a vector of the folders in each dataset folder
vapply(partitions,
FUN = function(partition.name) {
partition.score <- mean.ln.ml(list.files(path=paste0("./", folder.name[i], "/", partition.name, pattern = "_ss.nex.ss")))
return(partition.score)
},
FUN.VALUE = numeric(1)
)
}
process.folder(folder.name[1])
#function takes a folder.name vector
process.folder <- function(folder.name) {
partitions <- basename(list.files(path=paste0(".//Datasets//", folder.name))) ##a vector of the folders in each dataset folder
vapply(partitions,
FUN = function(partition.name) {
partition.score <- mean.ln.ml(list.files(path=paste0("./", folder.name, "/", partition.name, pattern = "_ss.nex.ss")))
return(partition.score)
},
FUN.VALUE = numeric(1)
)
}
process.folder(folder.name[1])
#function takes a folder.name vector
process.folder <- function(folder.name) {
partitions <- basename(list.files(path=paste0(".//Datasets//", folder.name))) ##a vector of the folders in each dataset folder
vapply(partitions,
FUN = function(partition.name) {
partition.score <- mean.ln.ml(list.files(path=paste0(".//", folder.name, "//", partition.name, pattern = "_ss.nex.ss")))
return(partition.score)
},
FUN.VALUE = numeric(1)
)
}
process.folder(folder.name[1])
mean.ln.ml(list.files(path=paste0(".//", folder.name, "//", partition.name, pattern = "_ss.nex.ss")))
mean.ln.ml(list.files(path=paste0(".//", folder.name, "//unpart", pattern = "_ss.nex.ss")))
mean.ln.ml(list.files(path=paste0(".//", folder.name, "//unpart"), pattern = "_ss.nex.ss")))
mean.ln.ml(list.files(path=paste0(".//", folder.name, "//unpart"), pattern = "_ss.nex.ss"))
#function takes a folder.name vector
process.folder <- function(folder.name) {
partitions <- list.files(path=paste0(".//Datasets//", folder.name)) ##a vector of the folders in each dataset folder
vapply(partitions,
FUN = function(partition.name) {
partition.score <- mean.ln.ml(list.files(path=paste0(".//", folder.name, "//", partition.name), pattern = "_ss.nex.ss"))
return(partition.score)
},
FUN.VALUE = numeric(1)
)
}
process.folder(folder.name[1])
paste0(".//", folder.name, "//unpart")
list.files(path=paste0(".//", folder.name, "//unpart"), pattern = "_ss.nex.ss")
list.files(path=paste0(".//", folder.name, "//unpart"), pattern = "_ss.nex.ss", recursive=TRUE))
list.files(path=paste0(".//", folder.name, "//unpart"), pattern = "_ss.nex.ss", recursive=TRUE)
list.files(path=paste0(".//", folder.name, "//unpart"), pattern = ".nex.ss$", recursive=TRUE)
list.files(path=paste0(".//", folder.name, "//unpart//"), pattern = ".nex.ss$", recursive=TRUE)
list.files(path=paste0(".//Datasets//", folder.name, "//unpart//"), pattern = ".nex.ss$", recursive=TRUE)
list.files(path=paste0(".//Datasets//", folder.name, "//unpart//"), pattern = "_ss.nex.ss$", recursive=TRUE)
list.files(path=paste0(".//Datasets//", folder.name, "//unpart//"), pattern = "_ss.nex.ss$")
#function takes a folder.name vector
process.folder <- function(folder.name) {
partitions <- list.files(path=paste0(".//Datasets//", folder.name)) ##a vector of the folders in each dataset folder
vapply(partitions,
FUN = function(partition.name) {
partition.score <- mean.ln.ml(list.files(path=paste0(".//Datasets//", folder.name, "//", partition.name), pattern = "_ss.nex.ss$"))
return(partition.score)
},
FUN.VALUE = numeric(1)
)
}
process.folder(folder.name[1])
#function takes a folder.name vector
process.folder <- function(folder.name) {
partitions <- list.files(path=paste0(".//Datasets//", folder.name)) ##a vector of the folders in each dataset folder
vapply(partitions,
FUN = function(partition.name) {
partition.score <- mean.ln.ml(list.files(path=paste0(".//Datasets//", folder.name, "//", partition.name), pattern = "_ss.nex.ss$"))
return(partition.score)
},
FUN.VALUE = numeric(1)
)
}
#vector of folder names in folder datasets
folder.name <- basename(list.files(".//Datasets"))
#function takes a folder.name vector
process.folder <- function(folder.name) {
partitions <- list.files(path=paste0(".//Datasets//", folder.name)) ##a vector of the folders in each dataset folder
vapply(partitions,
FUN = function(partition.name) {
partition.score <- mean.ln.ml(list.files(path=paste0(".//Datasets//", folder.name, "//", partition.name), pattern = "_ss.nex.ss$"))
return(partition.score)
},
FUN.VALUE = numeric(1)
)
}
process.folder(folder.name[1])
View(sum.ln.ml)
View(mean.ln.ml)
View(sum.ln.ml)
mean.ln.ml(list.files(path=paste0(".//Datasets//", folder.name, "//", partition.name), pattern = "_ss.nex.ss$"))
mean.ln.ml(list.files(path=paste0(".//Datasets//", folder.name, "//unpart//"), pattern = "_ss.nex.ss$"))
folder.name1 <- "hyo"
mean.ln.ml(list.files(path=paste0(".//Datasets//", folder.name1, "//unpart//"), pattern = "_ss.nex.ss$"))
mean.ln.ml(list.files(path=paste0("./Datasets/", folder.name1, "/unpart/"), pattern = "_ss.nex.ss$"))
list.files(path=paste0(".//Datasets//", folder.name1, "//unpart//"), pattern = "_ss.nex.ss$")
mean.ln.ml(list.files(path=paste0(".//Datasets//", folder.name1, "//unpart//"), pattern = "_ss.nex.ss$"))
paste0(folder.name, "_", partition.name, "_ss.nex.ss$")
#function takes a folder.name vector
process.folder <- function(folder.name) {
partitions <- list.files(path=paste0(".//Datasets//", folder.name)) ##a vector of the folders in each dataset folder
vapply(partitions,
FUN = function(partition.name) {
partition.score <- mean.ln.ml(list.files(pattern = paste0(folder.name, "_", partition.name, "_ss.nex.ss$")))
return(partition.score)
},
FUN.VALUE = numeric(1)
)
}
process.folder(folder.name[1])
partition.name1 <- "unpart"
mean.ln.ml(list.files(pattern = paste0(folder.name1, "_", partition.name1, "_ss.nex.ss$")))
paste0(folder.name1, "_", partition.name1, "_ss.nex.ss$")
paste0(folder.name1, "_", partition.name1, "_ss.nex.ss")
#function takes a folder.name vector
process.folder <- function(folder.name) {
partitions <- list.files(path=paste0(".//Datasets//", folder.name)) ##a vector of the folders in each dataset folder
vapply(partitions,
FUN = function(partition.name) {
partition.score <- mean.ln.ml(list.files(pattern = paste0(folder.name, "_", partition.name, "_ss.nex.ss$"), recursive=TRUE))
return(partition.score)
},
FUN.VALUE = numeric(1)
)
}
process.folder(folder.name[1])
#function takes a folder.name vector
process.folder <- function(folder.name) {
partitions <- list.files(path=paste0(".//Datasets//", folder.name)) ##a vector of the folders in each dataset folder
vapply(partitions,
FUN = function(partition.name) {
partition.score <- mean.ln.ml(list.files(pattern = paste0(folder.name, "_", partition.name, "_ss.nex.ss$"), recursive=TRUE))
return(partition.score)
},
FUN.VALUE = numeric(1)
)
}
process.folder(folder.name[1])
folders <- basename(list.files(".//Datasets"))
vapply(folders,
FUN=process.folder,
FUN.VALUE=numeric(len(partitions))
)
vapply(folders,
FUN=process.folder,
FUN.VALUE=numeric(length(partitions))
)
folders <- basename(list.files(".//Datasets"))
vapply(folders,
FUN=process.folder,
FUN.VALUE=numeric(length(partitions))
)
#function takes a folder.name vector
process.folder <- function(folder.name) {
partitions <- list.files(path=paste0(".//Datasets//", folder.name)) ##a vector of the folders in each dataset folder
vapply(partitions,
FUN = function(partition.name) {
partition.score <- mean.ln.ml(list.files(pattern = paste0(folder.name, "_", partition.name, "_ss.nex.ss$"), recursive=TRUE))
return(partition.score)
},
FUN.VALUE = numeric(1)
)
}
process.folder(folder.name[1])
#vector of folder names in folder datasets
folder.name <- basename(list.files(".//Datasets"))
#function takes a folder.name vector
process.folder <- function(folder.name) {
partitions <- list.files(path=paste0(".//Datasets//", folder.name)) ##a vector of the folders in each dataset folder
vapply(partitions,
FUN = function(partition.name) {
partition.score <- mean.ln.ml(list.files(pattern = paste0(folder.name, "_", partition.name, "_ss.nex.ss$"), recursive=TRUE))
return(partition.score)
},
FUN.VALUE = numeric(1)
)
}
process.folder(folder.name[1])
#vector of folder names in folder datasets
folder.name <- basename(list.files(".//Datasets"))
#function takes a folder.name vector
process.folder <- function(folder.name) {
partitions <- list.files(path=paste0(".//Datasets//", folder.name)) ##a vector of the folders in each dataset folder
vapply(partitions,
FUN = function(partition.name) {
partition.score <- mean.ln.ml(list.files(pattern = paste0(folder.name, "_", partition.name, "_ss.nex.ss$"), recursive=TRUE))
return(partition.score)
},
FUN.VALUE = numeric(1)
)
}
process.folder(folder.name[1])
